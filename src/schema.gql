# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthResult {
  accessToken: String
  error: String
  ok: Boolean!
  refreshToken: String
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

input FollowUserInput {
  username: String!
}

type FollowUserOutput {
  error: String
  ok: Boolean!
}

input LoginUserInput {
  password: String!
  username: String!
}

type LogoutResult {
  ok: Boolean!
}

type Mutation {
  followUser(followUserInput: FollowUserInput!): FollowUserOutput!
  logout: LogoutResult!
  refresh: AuthResult!
  seeFollowers(seeFollowersInput: SeeFollowersInput!): SeeFollowersOutput!
  seeFollowing(seeFollowingInput: SeeFollowingInput!): SeeFollowingOutput!
  signIn(loginUserInput: LoginUserInput!): AuthResult!
  signup(data: UserCreateInput!): AuthResult!
  unFollowUser(unFollowUserInput: UnFollowUserInput!): UnFollowUserOutput!
  updateProfile(userUpdateInput: UserUpdateInput!): User!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  searchUser(searchUserInput: SearchUserInput!): [User!]!
  seeProfile(seeProfileInput: SeeProfileInput!): SeeProfileOutput!
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

input SearchUserInput {
  currentCursor: UUID
  keyword: String!
  pageSize: Int = 5
}

input SeeFollowersInput {
  pageNum: Int!
  pageSize: Int = 5
  username: String!
}

type SeeFollowersOutput {
  error: String
  followers: [User!]
  ok: Boolean!
  totalPages: Int
}

input SeeFollowingInput {
  currentCursor: UUID
  pageSize: Int = 5
  username: String!
}

type SeeFollowingOutput {
  error: String
  following: [User!]
  hasMore: Boolean
  ok: Boolean!
}

input SeeProfileInput {
  username: String!
}

type SeeProfileOutput {
  _count: UserCount!
  avatar: Upload
  avatarOutputUrl: String
  bio: String
  createdAt: DateTime!
  email: EmailAddress!
  firstName: String!
  followers: [User!]
  following: [User!]
  id: UUID!
  isEmailVerified: Boolean!
  isFollowing: Boolean!
  isMe: Boolean!
  lastName: String
  refreshToken: String
  totalFollowers: Int!
  totalFollowing: Int!
  updatedAt: DateTime!
  username: String!
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

"""
A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
"""
scalar UUID

input UnFollowUserInput {
  username: String!
}

type UnFollowUserOutput {
  error: String
  ok: Boolean!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  _count: UserCount!
  avatar: Upload
  avatarOutputUrl: String
  bio: String
  createdAt: DateTime!
  email: EmailAddress!
  firstName: String!
  followers: [User!]
  following: [User!]
  id: UUID!
  isEmailVerified: Boolean!
  lastName: String
  refreshToken: String
  updatedAt: DateTime!
  username: String!
}

type UserCount {
  followers: Int!
  following: Int!
}

type UserCountAggregate {
  _all: Int!
  avatar: Int!
  avatarOutputUrl: Int!
  bio: Int!
  createdAt: Int!
  email: Int!
  firstName: Int!
  id: Int!
  isEmailVerified: Int!
  lastName: Int!
  refreshToken: Int!
  updatedAt: Int!
  username: Int!
}

input UserCreateInput {
  avatar: Upload
  avatarOutputUrl: String
  bio: String
  email: EmailAddress!
  firstName: String!
  followers: UserCreateNestedManyWithoutFollowingInput
  following: UserCreateNestedManyWithoutFollowersInput
  isEmailVerified: Boolean
  lastName: String
  password: String!
  username: String!
}

input UserCreateNestedManyWithoutFollowersInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutFollowersInput!]
  create: [UserCreateWithoutFollowersInput!]
}

input UserCreateNestedManyWithoutFollowingInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutFollowingInput!]
  create: [UserCreateWithoutFollowingInput!]
}

input UserCreateOrConnectWithoutFollowersInput {
  create: UserCreateWithoutFollowersInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutFollowingInput {
  create: UserCreateWithoutFollowingInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutFollowersInput {
  avatar: Upload
  avatarOutputUrl: String
  bio: String
  email: EmailAddress!
  firstName: String!
  following: UserCreateNestedManyWithoutFollowersInput
  isEmailVerified: Boolean
  lastName: String
  password: String!
  username: String!
}

input UserCreateWithoutFollowingInput {
  avatar: Upload
  avatarOutputUrl: String
  bio: String
  email: EmailAddress!
  firstName: String!
  followers: UserCreateNestedManyWithoutFollowingInput
  isEmailVerified: Boolean
  lastName: String
  password: String!
  username: String!
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

type UserMaxAggregate {
  avatar: Upload
  avatarOutputUrl: String
  bio: String
  createdAt: DateTime
  email: EmailAddress
  firstName: String
  id: UUID
  isEmailVerified: Boolean
  lastName: String
  refreshToken: String
  updatedAt: DateTime
  username: String
}

type UserMinAggregate {
  avatar: Upload
  avatarOutputUrl: String
  bio: String
  createdAt: DateTime
  email: EmailAddress
  firstName: String
  id: UUID
  isEmailVerified: Boolean
  lastName: String
  refreshToken: String
  updatedAt: DateTime
  username: String
}

input UserOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserOrderByWithRelationInput {
  avatar: SortOrder
  avatarOutputUrl: SortOrder
  bio: SortOrder
  email: SortOrder
  firstName: SortOrder
  followers: UserOrderByRelationAggregateInput
  following: UserOrderByRelationAggregateInput
  isEmailVerified: SortOrder
  lastName: SortOrder
  password: SortOrder
  username: SortOrder
}

enum UserScalarFieldEnum {
  avatar
  avatarOutputUrl
  bio
  createdAt
  email
  firstName
  id
  isEmailVerified
  lastName
  password
  refreshToken
  updatedAt
  username
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  avatar: StringNullableFilter
  avatarOutputUrl: StringNullableFilter
  bio: StringNullableFilter
  email: StringFilter
  firstName: StringFilter
  isEmailVerified: BoolFilter
  lastName: StringNullableFilter
  password: StringFilter
  username: StringFilter
}

input UserUpdateInput {
  avatar: Upload
  avatarOutputUrl: String
  bio: String
  email: EmailAddress
  firstName: String
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  isEmailVerified: Boolean
  lastName: String
  password: String
  username: String
}

input UserUpdateManyMutationInput {
  avatar: Upload
  avatarOutputUrl: String
  bio: String
  email: EmailAddress
  firstName: String
  isEmailVerified: Boolean
  lastName: String
  password: String
  username: String
}

input UserUpdateManyWithWhereWithoutFollowersInput {
  data: UserUpdateManyMutationInput!
  where: UserScalarWhereInput!
}

input UserUpdateManyWithWhereWithoutFollowingInput {
  data: UserUpdateManyMutationInput!
  where: UserScalarWhereInput!
}

input UserUpdateManyWithoutFollowersInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutFollowersInput!]
  create: [UserCreateWithoutFollowersInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowersInput!]
  updateMany: [UserUpdateManyWithWhereWithoutFollowersInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowersInput!]
}

input UserUpdateManyWithoutFollowingInput {
  connect: [UserWhereUniqueInput!]
  connectOrCreate: [UserCreateOrConnectWithoutFollowingInput!]
  create: [UserCreateWithoutFollowingInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowingInput!]
  updateMany: [UserUpdateManyWithWhereWithoutFollowingInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowingInput!]
}

input UserUpdateWithWhereUniqueWithoutFollowersInput {
  data: UserUpdateWithoutFollowersInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutFollowingInput {
  data: UserUpdateWithoutFollowingInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithoutFollowersInput {
  avatar: Upload
  avatarOutputUrl: String
  bio: String
  email: EmailAddress
  firstName: String
  following: UserUpdateManyWithoutFollowersInput
  isEmailVerified: Boolean
  lastName: String
  password: String
  username: String
}

input UserUpdateWithoutFollowingInput {
  avatar: Upload
  avatarOutputUrl: String
  bio: String
  email: EmailAddress
  firstName: String
  followers: UserUpdateManyWithoutFollowingInput
  isEmailVerified: Boolean
  lastName: String
  password: String
  username: String
}

input UserUpsertWithWhereUniqueWithoutFollowersInput {
  create: UserCreateWithoutFollowersInput!
  update: UserUpdateWithoutFollowersInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutFollowingInput {
  create: UserCreateWithoutFollowingInput!
  update: UserUpdateWithoutFollowingInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  avatar: StringNullableFilter
  avatarOutputUrl: StringNullableFilter
  bio: StringNullableFilter
  email: StringFilter
  firstName: StringFilter
  followers: UserListRelationFilter
  following: UserListRelationFilter
  isEmailVerified: BoolFilter
  lastName: StringNullableFilter
  password: StringFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  email: EmailAddress
  username: String
}
