# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthResult {
  accessToken: String
  error: String
  ok: Boolean!
  refreshToken: String
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input CreatePhotoInput {
  caption: String
  file: String!
}

type CreatePhotoOutput {
  caption: String
  createdAt: DateTime!
  file: String
  id: UUID!
  photoOutputUrl: String
  updatedAt: DateTime!
  userId: UUID!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

input FollowUserInput {
  username: String!
}

type FollowUserOutput {
  error: String
  ok: Boolean!
}

type Hashtag {
  _count: HashtagCount!
  createdAt: DateTime!
  hashtag: String!
  id: UUID!
  photos: [Photo!]
  updatedAt: DateTime!
}

type HashtagCount {
  photos: Int!
}

type HashtagCountAggregate {
  _all: Int!
  createdAt: Int!
  hashtag: Int!
  id: Int!
  updatedAt: Int!
}

input HashtagCreateNestedManyWithoutPhotosInput {
  connect: [HashtagWhereUniqueInput!]
  connectOrCreate: [HashtagCreateOrConnectWithoutPhotosInput!]
  create: [HashtagCreateWithoutPhotosInput!]
}

input HashtagCreateOrConnectWithoutPhotosInput {
  create: HashtagCreateWithoutPhotosInput!
  where: HashtagWhereUniqueInput!
}

input HashtagCreateWithoutPhotosInput {
  hashtag: String!
  id: UUID
}

input HashtagListRelationFilter {
  every: HashtagWhereInput
  none: HashtagWhereInput
  some: HashtagWhereInput
}

type HashtagMaxAggregate {
  createdAt: DateTime
  hashtag: String
  id: UUID
  updatedAt: DateTime
}

type HashtagMinAggregate {
  createdAt: DateTime
  hashtag: String
  id: UUID
  updatedAt: DateTime
}

input HashtagOrderByRelationAggregateInput {
  _count: SortOrder
}

input HashtagScalarWhereInput {
  AND: [HashtagScalarWhereInput!]
  NOT: [HashtagScalarWhereInput!]
  OR: [HashtagScalarWhereInput!]
  hashtag: StringFilter
  id: StringFilter
}

input HashtagUpdateManyMutationInput {
  hashtag: String
  id: UUID
}

input HashtagUpdateManyWithWhereWithoutPhotosInput {
  data: HashtagUpdateManyMutationInput!
  where: HashtagScalarWhereInput!
}

input HashtagUpdateManyWithoutPhotosInput {
  connect: [HashtagWhereUniqueInput!]
  connectOrCreate: [HashtagCreateOrConnectWithoutPhotosInput!]
  create: [HashtagCreateWithoutPhotosInput!]
  delete: [HashtagWhereUniqueInput!]
  deleteMany: [HashtagScalarWhereInput!]
  disconnect: [HashtagWhereUniqueInput!]
  set: [HashtagWhereUniqueInput!]
  update: [HashtagUpdateWithWhereUniqueWithoutPhotosInput!]
  updateMany: [HashtagUpdateManyWithWhereWithoutPhotosInput!]
  upsert: [HashtagUpsertWithWhereUniqueWithoutPhotosInput!]
}

input HashtagUpdateWithWhereUniqueWithoutPhotosInput {
  data: HashtagUpdateWithoutPhotosInput!
  where: HashtagWhereUniqueInput!
}

input HashtagUpdateWithoutPhotosInput {
  hashtag: String
  id: UUID
}

input HashtagUpsertWithWhereUniqueWithoutPhotosInput {
  create: HashtagCreateWithoutPhotosInput!
  update: HashtagUpdateWithoutPhotosInput!
  where: HashtagWhereUniqueInput!
}

input HashtagWhereInput {
  AND: [HashtagWhereInput!]
  NOT: [HashtagWhereInput!]
  OR: [HashtagWhereInput!]
  hashtag: StringFilter
  id: StringFilter
  photos: PhotoListRelationFilter
}

input HashtagWhereUniqueInput {
  hashtag: String
  id: UUID
}

input LoginUserInput {
  password: String!
  username: String!
}

type LogoutResult {
  ok: Boolean!
}

type Mutation {
  createPhoto(createPhotoInput: CreatePhotoInput!): CreatePhotoOutput!
  followUser(followUserInput: FollowUserInput!): FollowUserOutput!
  logout: LogoutResult!
  refresh: AuthResult!
  seeFollowers(seeFollowersInput: SeeFollowersInput!): SeeFollowersOutput!
  seeFollowing(seeFollowingInput: SeeFollowingInput!): SeeFollowingOutput!
  signIn(loginUserInput: LoginUserInput!): AuthResult!
  signup(data: UserCreateInput!): AuthResult!
  unFollowUser(unFollowUserInput: UnFollowUserInput!): UnFollowUserOutput!
  updateProfile(userUpdateInput: UserUpdateInput!): User!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Photo {
  _count: PhotoCount!
  caption: String
  createdAt: DateTime!
  file: Upload
  hashtags: [Hashtag!]
  id: UUID!
  photoOutputUrl: String
  updatedAt: DateTime!
  user: User!
  userId: UUID!
}

type PhotoCount {
  hashtags: Int!
}

type PhotoCountAggregate {
  _all: Int!
  caption: Int!
  createdAt: Int!
  file: Int!
  id: Int!
  photoOutputUrl: Int!
  updatedAt: Int!
  userId: Int!
}

input PhotoCreateManyUserInput {
  caption: String
  file: Upload
  id: UUID
  photoOutputUrl: String
}

input PhotoCreateManyUserInputEnvelope {
  data: [PhotoCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input PhotoCreateNestedManyWithoutUserInput {
  connect: [PhotoWhereUniqueInput!]
  connectOrCreate: [PhotoCreateOrConnectWithoutUserInput!]
  create: [PhotoCreateWithoutUserInput!]
  createMany: PhotoCreateManyUserInputEnvelope
}

input PhotoCreateOrConnectWithoutUserInput {
  create: PhotoCreateWithoutUserInput!
  where: PhotoWhereUniqueInput!
}

input PhotoCreateWithoutUserInput {
  caption: String
  file: Upload
  hashtags: HashtagCreateNestedManyWithoutPhotosInput
  id: UUID
  photoOutputUrl: String
}

input PhotoListRelationFilter {
  every: PhotoWhereInput
  none: PhotoWhereInput
  some: PhotoWhereInput
}

type PhotoMaxAggregate {
  caption: String
  createdAt: DateTime
  file: Upload
  id: UUID
  photoOutputUrl: String
  updatedAt: DateTime
  userId: UUID
}

type PhotoMinAggregate {
  caption: String
  createdAt: DateTime
  file: Upload
  id: UUID
  photoOutputUrl: String
  updatedAt: DateTime
  userId: UUID
}

input PhotoOrderByRelationAggregateInput {
  _count: SortOrder
}

input PhotoOrderByWithRelationInput {
  caption: SortOrder
  file: SortOrder
  hashtags: HashtagOrderByRelationAggregateInput
  id: SortOrder
  photoOutputUrl: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum PhotoScalarFieldEnum {
  caption
  createdAt
  file
  id
  photoOutputUrl
  updatedAt
  userId
}

input PhotoScalarWhereInput {
  AND: [PhotoScalarWhereInput!]
  NOT: [PhotoScalarWhereInput!]
  OR: [PhotoScalarWhereInput!]
  caption: StringNullableFilter
  file: StringNullableFilter
  id: StringFilter
  photoOutputUrl: StringNullableFilter
  userId: StringFilter
}

input PhotoUpdateManyMutationInput {
  caption: String
  file: Upload
  id: UUID
  photoOutputUrl: String
}

input PhotoUpdateManyWithWhereWithoutUserInput {
  data: PhotoUpdateManyMutationInput!
  where: PhotoScalarWhereInput!
}

input PhotoUpdateManyWithoutUserInput {
  connect: [PhotoWhereUniqueInput!]
  connectOrCreate: [PhotoCreateOrConnectWithoutUserInput!]
  create: [PhotoCreateWithoutUserInput!]
  createMany: PhotoCreateManyUserInputEnvelope
  delete: [PhotoWhereUniqueInput!]
  deleteMany: [PhotoScalarWhereInput!]
  disconnect: [PhotoWhereUniqueInput!]
  set: [PhotoWhereUniqueInput!]
  update: [PhotoUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [PhotoUpdateManyWithWhereWithoutUserInput!]
  upsert: [PhotoUpsertWithWhereUniqueWithoutUserInput!]
}

input PhotoUpdateWithWhereUniqueWithoutUserInput {
  data: PhotoUpdateWithoutUserInput!
  where: PhotoWhereUniqueInput!
}

input PhotoUpdateWithoutUserInput {
  caption: String
  file: Upload
  hashtags: HashtagUpdateManyWithoutPhotosInput
  id: UUID
  photoOutputUrl: String
}

input PhotoUpsertWithWhereUniqueWithoutUserInput {
  create: PhotoCreateWithoutUserInput!
  update: PhotoUpdateWithoutUserInput!
  where: PhotoWhereUniqueInput!
}

input PhotoWhereInput {
  AND: [PhotoWhereInput!]
  NOT: [PhotoWhereInput!]
  OR: [PhotoWhereInput!]
  caption: StringNullableFilter
  file: StringNullableFilter
  hashtags: HashtagListRelationFilter
  id: StringFilter
  photoOutputUrl: StringNullableFilter
  user: UserRelationFilter
  userId: StringFilter
}

input PhotoWhereUniqueInput {
  id: UUID
}

type Query {
  photos(cursor: PhotoWhereUniqueInput, distinct: [PhotoScalarFieldEnum!], orderBy: [PhotoOrderByWithRelationInput!], skip: Int, take: Int, where: PhotoWhereInput): [Photo!]!
  searchUser(searchUserInput: SearchUserInput!): [User!]!
  seeHashtag(seeHashtagInput: SeeHashtagInput!): SeeHashtagOutput!
  seePhoto(seePhotoInput: SeePhotoInput!): SeePhotoOutput!
  seeProfile(seeProfileInput: SeeProfileInput!): SeeProfileOutput!
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

input SearchUserInput {
  currentCursor: UUID
  keyword: String!
  pageSize: Int = 5
}

input SeeFollowersInput {
  pageNum: Int!
  pageSize: Int = 5
  username: String!
}

type SeeFollowersOutput {
  error: String
  followers: [User!]
  ok: Boolean!
  totalPages: Int
}

input SeeFollowingInput {
  currentCursor: UUID
  pageSize: Int = 5
  username: String!
}

type SeeFollowingOutput {
  error: String
  following: [User!]
  hasMore: Boolean
  ok: Boolean!
}

input SeeHashtagInput {
  hashtag: String!
}

type SeeHashtagOutput {
  createdAt: DateTime
  hashtag: String!
  id: UUID!
  photos(pageNumber: Int!, pageSize: Int = 5): [Photo!]!
  totalPhotos: Int!
  updatedAt: DateTime
}

input SeePhotoInput {
  id: UUID!
}

type SeePhotoOutput {
  caption: String
  createdAt: DateTime
  file: String
  hashtags: [Hashtag!]!
  id: UUID!
  photoOutputUrl: String
  updatedAt: DateTime
  user: User!
  userId: UUID
}

input SeeProfileInput {
  username: String!
}

type SeeProfileOutput {
  _count: UserCount!
  avatar: Upload
  avatarOutputUrl: String
  bio: String
  createdAt: DateTime!
  email: EmailAddress!
  firstName: String!
  id: UUID!
  isEmailVerified: Boolean!
  isFollowing: Boolean!
  isMe: Boolean!
  lastName: String
  photos: [Photo!]
  refreshToken: String
  totalFollowers: Int!
  totalFollowing: Int!
  updatedAt: DateTime!
  username: String!
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

"""
A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
"""
scalar UUID

input UnFollowUserInput {
  username: String!
}

type UnFollowUserOutput {
  error: String
  ok: Boolean!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  _count: UserCount!
  avatar: Upload
  avatarOutputUrl: String
  bio: String
  createdAt: DateTime!
  email: EmailAddress!
  firstName: String!
  id: UUID!
  isEmailVerified: Boolean!
  lastName: String
  photos: [Photo!]
  refreshToken: String
  updatedAt: DateTime!
  username: String!
}

type UserCount {
  followers: Int!
  following: Int!
  photos: Int!
}

type UserCountAggregate {
  _all: Int!
  avatar: Int!
  avatarOutputUrl: Int!
  bio: Int!
  createdAt: Int!
  email: Int!
  firstName: Int!
  id: Int!
  isEmailVerified: Int!
  lastName: Int!
  refreshToken: Int!
  updatedAt: Int!
  username: Int!
}

input UserCreateInput {
  avatar: Upload
  avatarOutputUrl: String
  bio: String
  email: EmailAddress!
  firstName: String!
  isEmailVerified: Boolean
  lastName: String
  password: String!
  photos: PhotoCreateNestedManyWithoutUserInput
  username: String!
}

type UserMaxAggregate {
  avatar: Upload
  avatarOutputUrl: String
  bio: String
  createdAt: DateTime
  email: EmailAddress
  firstName: String
  id: UUID
  isEmailVerified: Boolean
  lastName: String
  refreshToken: String
  updatedAt: DateTime
  username: String
}

type UserMinAggregate {
  avatar: Upload
  avatarOutputUrl: String
  bio: String
  createdAt: DateTime
  email: EmailAddress
  firstName: String
  id: UUID
  isEmailVerified: Boolean
  lastName: String
  refreshToken: String
  updatedAt: DateTime
  username: String
}

input UserOrderByWithRelationInput {
  avatar: SortOrder
  avatarOutputUrl: SortOrder
  bio: SortOrder
  email: SortOrder
  firstName: SortOrder
  isEmailVerified: SortOrder
  lastName: SortOrder
  password: SortOrder
  photos: PhotoOrderByRelationAggregateInput
  username: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  avatar
  avatarOutputUrl
  bio
  createdAt
  email
  firstName
  id
  isEmailVerified
  lastName
  password
  refreshToken
  updatedAt
  username
}

input UserUpdateInput {
  avatar: Upload
  avatarOutputUrl: String
  bio: String
  email: EmailAddress
  firstName: String
  isEmailVerified: Boolean
  lastName: String
  password: String
  photos: PhotoUpdateManyWithoutUserInput
  username: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  avatar: StringNullableFilter
  avatarOutputUrl: StringNullableFilter
  bio: StringNullableFilter
  email: StringFilter
  firstName: StringFilter
  isEmailVerified: BoolFilter
  lastName: StringNullableFilter
  password: StringFilter
  photos: PhotoListRelationFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  email: EmailAddress
  username: String
}
